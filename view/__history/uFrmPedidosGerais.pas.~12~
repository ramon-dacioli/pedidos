unit uFrmPedidosGerais;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Data.DB, Vcl.Grids, uDmConexao,
  Vcl.DBGrids, uDaoCliente;

type
  TOperacao = (opNovo, opAlterar, opNavegar);

  TForm1 = class(TForm)
    Label1: TLabel;
    edtPesquisar: TEdit;
    Button1: TButton;
    DBGrid1: TDBGrid;
    DataSource1: TDataSource;
    procedure Button1Click(Sender: TObject);
    procedure FormCreate(Sender: TObject);
  private
    { Private declarations }
    DaoCliente: TDaoCliente;
  public
    { Public declarations }
    FOperacao: TOperacao;
    procedure Detalhar;
    procedure Configuracoes;
    procedure Pesquisar;
    procedure CarregarCliente;
    procedure Listar;
    procedure HabilitarControles(aOperacao: TOperacao);
  end;

var
  Form1: TForm1;

implementation

uses
  uClienteController;

{$R *.dfm}

procedure TForm1.Button1Click(Sender: TObject);
begin
  Pesquisar;
end;

procedure TForm1.CarregarCliente;
begin

end;

procedure TForm1.Configuracoes;
begin

end;

procedure TForm1.Detalhar;
begin

end;

procedure TForm1.FormCreate(Sender: TObject);
begin
  DataModule1 := TDataModule1.Create(nil);
end;

procedure TForm1.HabilitarControles(aOperacao: TOperacao);
begin

end;

procedure TForm1.Listar;
begin

end;

procedure TForm1.Pesquisar;
var
  oClienteController: TClienteController;
  // Você pode definir uma variável para armazenar os resultados,
  // como uma lista ou um objeto de cliente
begin
  oClienteController := TClienteController.Create;
  try
    // Presumindo que o método Pesquisar do TDaoCliente populou um objeto ou lista
    oClienteController.Pesquisar(edtPesquisar.Text);

    // Aqui você pode adicionar lógica para exibir ou manipular os resultados
    // Por exemplo:
    // if oClienteController.TemResultados then
    //   ExibirResultados(oClienteController.Resultados);

  finally
    FreeAndNil(oClienteController); // Corrigido o uso do FreeAndNil
  end;
end;


end.
