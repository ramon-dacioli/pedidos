unit uDmCliente;

interface

uses
  SysUtils, Classes, DB, FireDAC.Comp.Client, FireDAC.Stan.Param, uClienteModel,
  FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Error, FireDAC.DatS,
  FireDAC.Phys.Intf, FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt,
  FireDAC.Comp.DataSet, Datasnap.DBClient;

type
  TDmCliente = class(TDataModule)
    qryPesquisar: TFDQuery;
    procedure DataModuleCreate(Sender: TObject);
  private
    { Private declarations }
  public
    procedure Pesquisar(sNome: string);
    procedure CarregarCliente (oCliente: TCliente; iCodigo: Integer);
  end;

var
  DmCliente: TDmCliente;

implementation

uses uDmConexao; // Supondo que o DmConexao contém o TFDConnection

{$R *.dfm}

procedure TDmCliente.CarregarCliente(oCliente: TCliente; iCodigo: Integer);
begin
  qryPesquisar.SQL.Text := 'SELECT * FROM clientes WHERE codigo = :codigo';
  qryPesquisar.ParamByName('codigo').AsInteger := iCodigo;
  qryPesquisar.Open;

  if not qryPesquisar.IsEmpty then
  begin
    oCliente.Codigo := qryPesquisar.FieldByName('codigo').AsInteger;
    oCliente.Nome := qryPesquisar.FieldByName('nome').AsString;
    oCliente.Cidade := qryPesquisar.FieldByName('cidade').AsString;
    oCliente.UF := qryPesquisar.FieldByName('uf').AsString;
    //oCliente.Telefone := qryPesquisar.FieldByName('telefone').AsString;
  end;

  qryPesquisar.Close;
end;

procedure TDmCliente.DataModuleCreate(Sender: TObject);
begin
  try
  if Assigned(DmConexao) and Assigned(DmConexao.sqlConexao) and DmConexao.sqlConexao.Connected then
  begin
    qryPesquisar.Connection := DmConexao.sqlConexao;
  end
  else
  begin
    raise Exception.Create('A conexão não está disponível ou não foi criada.');
  end;
except
  on E: Exception do
    //ShowMessage('Erro ao configurar as conexões: ' + E.Message);
end;

end;

procedure TDmCliente.Pesquisar(sNome: string);
begin
  qryPesquisar.SQL.Text := 'SELECT * FROM clientes WHERE nome LIKE :Nome';
  qryPesquisar.ParamByName('Nome').AsString := '%' + sNome + '%';
  qryPesquisar.Open;
end;

end.

